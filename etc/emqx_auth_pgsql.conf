##--------------------------------------------------------------------
## PostgreSQL Auth/ACL Plugin
##--------------------------------------------------------------------

pgsql {
  host = "127.0.0.1"
  port = 5432
  database = "mqtt"
  username = "root"
  password = ""
  pool_size = 8
  encoding = "utf8"
  ssl = false
  ssl_opts {
    keyfile = ""
    certfile = ""
    cacertfile = ""
  }
}

## Authentication query SQL.
##
## Variables:
##  - %u: username
##  - %c: clientid
##  - %C: common name of client TLS cert
##  - %d: subject of client TLS cert
##
auth_query = "select password from mqtt_user where username = '%u' limit 1"

## Password hash: plain | md5 | sha | sha256 | bcrypt
password_hash = sha256

## sha256 with salt prefix
## password_hash = salt,sha256

## sha256 with salt suffix
## password_hash = sha256,salt

## bcrypt with salt prefix
## password_hash = salt,bcrypt

## pbkdf2 with macfun iterations dklen
## macfun: md4, md5, ripemd160, sha, sha224, sha256, sha384, sha512
## password_hash = pbkdf2,sha256,1000,20

## Superuser query SQL.
##
## Variables:
##  - %u: username
##  - %c: clientid
##  - %C: common name of client TLS cert
##  - %d: subject of client TLS cert
##
auth.pgsql.super_query = "select is_superuser from mqtt_user where username = '%u' limit 1"

## ACL query SQL. Comment this query, the ACL will be disabled.
##
## Variables:
##  - %a: ipaddress
##  - %u: username
##  - %c: clientid
##
## Note: You can add the 'ORDER BY' statement to control the rules match order
acl_query = "select allow, ipaddr, username, clientid, access, topic from mqtt_acl where ipaddr = '%a' or username = '%u' or username = '$all' or clientid = '%c'"

